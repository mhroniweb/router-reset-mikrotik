# ==============================================
# MIKROTIK ROUTER RESET SYSTEM - ENVIRONMENT VARIABLES
# ==============================================
# 
# This file contains example environment variables.
# Copy this file to .env.local and fill in your actual values.
# 
# NEVER commit .env.local to version control!
# ==============================================

# ----------------------------------------------
# DATABASE CONFIGURATION
# ----------------------------------------------
# MongoDB connection string
# Local: mongodb://localhost:27017/mikrotik-reset
# Atlas: mongodb+srv://<username>:<password>@cluster.mongodb.net/mikrotik-reset
MONGODB_URI=mongodb://localhost:27017/mikrotik-reset

# ----------------------------------------------
# NEXTAUTH CONFIGURATION (Authentication)
# ----------------------------------------------
# NextAuth secret - MUST be a strong random string (minimum 32 characters)
# Generate with: openssl rand -base64 32
# Or use: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
NEXTAUTH_SECRET=your-super-secret-nextauth-secret-minimum-32-chars-here

# The base URL of your application
# Development: http://localhost:3000
# Production: https://yourdomain.com
NEXTAUTH_URL=http://localhost:3000

# ----------------------------------------------
# ENCRYPTION CONFIGURATION
# ----------------------------------------------
# Encryption key for router passwords - MUST be exactly 32 characters
# Generate with: openssl rand -hex 16
# Or use: node -e "console.log(require('crypto').randomBytes(16).toString('hex'))"
# WARNING: Changing this key will make existing encrypted passwords unreadable!
ENCRYPTION_KEY=your-exactly-32-character-key!

# ----------------------------------------------
# APPLICATION ENVIRONMENT
# ----------------------------------------------
# Set to 'production' when deploying
NODE_ENV=development

# ----------------------------------------------
# SECURITY NOTES
# ----------------------------------------------
# 1. NEVER use the example values above in production
# 2. Generate strong, unique secrets for each environment variable
# 3. Keep your .env.local file secure and never commit it to git
# 4. In production, use environment variable management from your hosting provider
# 5. Rotate secrets regularly (every 90 days recommended)
# 6. If ENCRYPTION_KEY is compromised, all router passwords must be re-entered
# 
# For production deployment:
# - Use strong HTTPS/TLS certificates
# - Enable firewall rules
# - Set up database backups
# - Configure logging and monitoring
# - Review SECURITY_AUDIT_REPORT.md and SECURITY_FIXES.md

